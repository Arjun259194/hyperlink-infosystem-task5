openapi: 3.0.3
info:
  title: Social Media API
  description: A comprehensive API for user management, posts, and social features with authentication and encryption
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.example.com/v1
    description: Production server

security:
  - cookieAuth: []

paths:
  # Authentication Endpoints
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with encrypted response
      security: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON string containing user registration data
      responses:
        '201':
          description: User created successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing user data without password
        '400':
          description: Body not found
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists in database
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and set HTTP-only cookie
      security: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON string containing login credentials and device info
              example: {
                "cred": {
                  "email": "user@example.com",
                  "password": "password123"
                },
                "device": {
                  "device_id": "abc123",
                  "device_type": "mobile"
                }
              }
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth=<token>; HttpOnly; Secure; Path=/; Expires=1d; Max-Age=86400000
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing auth token and device info
        '400':
          description: Body not found
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found by email
          $ref: '#/components/responses/NotFound'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Clear authentication cookie and delete device info
      responses:
        '200':
          description: Logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth=; HttpOnly; Secure; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT
        '401':
          description: User ID missing from token
          $ref: '#/components/responses/Unauthorized'

  # User Endpoints
  /user:
    get:
      tags:
        - Users
      summary: Get users with pagination
      description: Retrieve a paginated list of users
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing paginated users
    delete:
      tags:
        - Users
      summary: Delete user account
      description: Soft delete the authenticated user's account
      responses:
        '204':
          description: User deleted successfully

  /user/search:
    get:
      tags:
        - Users
      summary: Search users
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            description: Search query string
      responses:
        '200':
          description: Search results
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing search results

  /user/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get authenticated user's profile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing user profile
    put:
      tags:
        - Users
      summary: Update user profile
      description: Update authenticated user's profile
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON containing profile updates
      responses:
        '200':
          description: Profile updated successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing updated profile

  # Post Endpoints
  /post:
    post:
      tags:
        - Posts
      summary: Create new post
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON containing post data
      responses:
        '201':
          description: Post created successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing created post
    put:
      tags:
        - Posts
      summary: Update post
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON containing post updates
      responses:
        '200':
          description: Post updated successfully
    get:
      tags:
        - Posts
      summary: Get all posts
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing posts

  /post/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Posts
      summary: Get post by ID
      responses:
        '200':
          description: Post retrieved successfully
    delete:
      tags:
        - Posts
      summary: Delete post
      responses:
        '204':
          description: Post deleted successfully

  /post/{id}/like:
    post:
      tags:
        - Posts
      summary: Like a post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post liked successfully

  /post/{id}/dislike:
    post:
      tags:
        - Posts
      summary: Dislike a post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post disliked successfully

  /post/repost:
    post:
      tags:
        - Posts
      summary: Repost another user's post
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON containing repost data
      responses:
        '200':
          description: Post reposted successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing repost data

  /post/repost/{id}:
    delete:
      tags:
        - Posts
      summary: Remove a repost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Repost removed successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # Comment Endpoints
  /comment:
    post:
      tags:
        - Comments
      summary: Create comment
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON containing comment data
      responses:
        '200':
          description: Comment created successfully
    put:
      tags:
        - Comments
      summary: Update comment
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Encrypted JSON containing comment updates
      responses:
        '200':
          description: Comment updated successfully

  /comment/by-id:
    get:
      tags:
        - Comments
      summary: Get comment by ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment retrieved successfully
    delete:
      tags:
        - Comments
      summary: Delete comment
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Comment deleted successfully

  # Country Endpoints
  /countries:
    get:
      tags:
        - Countries
      summary: Get all countries
      security: []
      responses:
        '200':
          description: Countries retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted response containing countries list

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth
      description: HTTP-only authentication cookie containing JWT token

  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1

    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        default: 5
      example: 10

  schemas:
    UserRegistration:
      type: object
      required:
        - login_type
        - social_id
        - first_name
        - last_name
        - email
        - password
      properties:
        login_type:
          type: string
          enum: [N, F, G, A]
        social_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        country_code:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        dob:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          enum: [male, female, other]
        latitude:
          type: number
          nullable: true
        longitude:
          type: number
          nullable: true
        profile_image:
          type: string
          format: uri
          nullable: true

    LoginRequest:
      type: object
      required:
        - cred
        - device
      properties:
        cred:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
            password:
              type: string
        device:
          type: object
          required:
            - device_id
            - device_type
          properties:
            device_id:
              type: string
            device_type:
              type: string

    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        country_code:
          type: string
        phone:
          type: string
        dob:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other]
        latitude:
          type: number
        longitude:
          type: number
        profile_image:
          type: string
          format: uri

    PostCreate:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
        status:
          type: string
          enum: [Pending, Uploaded, Removed, Unknown]
          default: Unknown

    PostUpdate:
      type: object
      required:
        - post_id
      properties:
        title:
          type: string
        content:
          type: string
        status:
          type: string
          enum: [Pending, Uploaded, Removed, Unknown]

    CommentCreate:
      type: object
      required:
        - post_id
        - content
      properties:
        post_id:
          type: string
        content:
          type: string

    CommentUpdate:
      type: object
      required:
        - commentId
        - content
      properties:
        commentId:
          type: string
        content:
          type: string

    PostRepost:
      type: object
      required:
        - post_id
        - user_id
      properties:
        post_id:
          type: string
        user_id:
          type: string
        thought:
          type: string
          description: Optional comment on the repost

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        success:
          type: boolean
          default: false

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - Authentication required or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Not found - Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Posts
    description: Post management endpoints
  - name: Comments
    description: Comment management endpoints  
  - name: Countries
    description: Country data endpoints