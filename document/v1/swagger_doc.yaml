openapi: 3.0.3
info:
  title: Social Media API
  description: A comprehensive API for user management, posts, and social features with authentication and encryption
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.example.com
    description: Production server

security:
  - cookieAuth: []

paths:
  # Authentication Endpoints
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with encrypted response
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              login_type: "N"
              social_id: ""
              first_name: "John"
              last_name: "Doe"
              email: "john.doe@example.com"
              password: "password123"
              phone: "+1234567890"
              country_code: "+1"
      responses:
        '201':
          description: User created successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing user data
              example: "encrypted_response_string"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and set HTTP-only cookie
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john.doe@example.com"
              password: "password123"
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
              description: HTTP-only authentication cookie
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response with token
              example: "encrypted_response_string"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Clear authentication cookie and logout user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  # User Endpoints
  /users:
    get:
      tags:
        - Users
      summary: Get users with pagination
      description: Retrieve a paginated list of users
      security: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Users retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing users array
              example: "encrypted_response_string"
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Users
      summary: Delete user account
      description: Soft delete the authenticated user's account
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/search:
    get:
      tags:
        - Users
      summary: Search users
      description: Search for users by query string
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
          description: Search query string
          example: "john"
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing search results
              example: "encrypted_response_string"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get the authenticated user's profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing user profile
              example: "encrypted_response_string"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update the authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
            example:
              first_name: "Jane"
              last_name: "Smith"
              phone: "+1987654321"
      responses:
        '200':
          description: Profile updated successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing updated user
              example: "encrypted_response_string"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Post Endpoints
  /posts:
    post:
      tags:
        - Posts
      summary: Create a new post
      description: Create a new post for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
            example:
              title: "My First Post"
              content: "This is the content of my first post."
              status: "Uploaded"
      responses:
        '201':
          description: Post created successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing created post
              example: "encrypted_response_string"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Posts
      summary: Update a post
      description: Update an existing post owned by the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
            example:
              post_id: "64a7b8c9d1e2f3a4b5c6d7e8"
              title: "Updated Post Title"
              content: "Updated content"
              status: "Uploaded"
      responses:
        '200':
          description: Post updated successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing updated post
              example: "encrypted_response_string"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    get:
      tags:
        - Posts
      summary: Get all posts
      description: Retrieve a paginated list of all posts
      security: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing posts array
              example: "encrypted_response_string"
        '404':
          $ref: '#/components/responses/NotFound'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get a specific post
      description: Retrieve a single post by its ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Post ID
          example: "64a7b8c9d1e2f3a4b5c6d7e8"
      responses:
        '200':
          description: Post retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing post data
              example: "encrypted_response_string"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Posts
      summary: Delete a post
      description: Delete a post owned by the authenticated user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Post ID
          example: "64a7b8c9d1e2f3a4b5c6d7e8"
      responses:
        '204':
          description: Post deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Country Endpoints
  /countries:
    get:
      tags:
        - Countries
      summary: Get all countries
      description: Retrieve a list of all countries
      security: []
      responses:
        '200':
          description: Countries retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Encrypted JSON response containing countries array
              example: "encrypted_response_string"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth
      description: HTTP-only authentication cookie containing JWT token

  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination
      example: 1

    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        default: 5
      description: Number of items per page
      example: 10

  schemas:
    UserRegistration:
      type: object
      required:
        - login_type
        - social_id
        - first_name
        - last_name
        - email
        - password
      properties:
        login_type:
          type: string
          enum: [N, F, G, A]
          description: Login type (N=Normal, F=Facebook, G=Google, A=Apple)
        social_id:
          type: string
          description: Social media ID (empty for normal registration)
        first_name:
          type: string
          minLength: 1
          description: User's first name
        last_name:
          type: string
          minLength: 1
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 6
          description: User's password
        country_code:
          type: string
          nullable: true
          description: Country code for phone number
        phone:
          type: string
          nullable: true
          description: User's phone number
        dob:
          type: string
          format: date
          nullable: true
          description: Date of birth
        gender:
          type: string
          enum: [male, female, other]
          description: User's gender
        latitude:
          type: number
          nullable: true
          description: User's latitude coordinate
        longitude:
          type: number
          nullable: true
          description: User's longitude coordinate
        profile_image:
          type: string
          format: uri
          nullable: true
          description: URL to user's profile image
        status:
          type: string
          description: User status
        ip:
          type: string
          nullable: true
          description: User's IP address
        app_version:
          type: string
          nullable: true
          description: App version user is using

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password

    UserUpdate:
      type: object
      properties:
        login_type:
          type: string
          enum: [N, F, G, A]
        social_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        country_code:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        dob:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          enum: [male, female, other]
        latitude:
          type: number
          nullable: true
        longitude:
          type: number
          nullable: true
        profile_image:
          type: string
          nullable: true
        login_status:
          type: boolean
        status:
          type: string
        ip:
          type: string
          nullable: true
        app_version:
          type: string
          nullable: true

    PostCreate:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          description: Post title
        content:
          type: string
          description: Post content
        status:
          type: string
          enum: [Pending, Uploaded, Removed, Unknown]
          default: Unknown
          description: Post status

    PostUpdate:
      type: object
      required:
        - post_id
      properties:
        post_id:
          type: string
          description: ID of the post to update
        title:
          type: string
          description: Updated post title
        content:
          type: string
          description: Updated post content
        status:
          type: string
          enum: [Pending, Uploaded, Removed, Unknown]
          description: Updated post status

    Error:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
        success:
          type: boolean
          default: false
        message:
          type: string
          description: Error message
        data:
          type: object
          nullable: true

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            success: false
            message: "Not valid data in request"

    Unauthorized:
      description: Unauthorized - Authentication required or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            success: false
            message: "User ID missing from token"

    NotFound:
      description: Not found - Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            success: false
            message: "Resource not found"

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 409
            success: false
            message: "User already exists in database"

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Posts
    description: Post management endpoints
  - name: Countries
    description: Country data endpoints